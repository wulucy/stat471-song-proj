glm.input <- as.formula(paste("rating", "~", paste(beta[-1],collapse = "+")))
result.glm <- glm(glm.input, data=data2.train, family=binomial)
min
min
min
min
# Pulling out the betas
beta.lasso <- coef(result.lasso, s="lambda.min")
beta <- beta.lasso[which(beta.lasso !=0),]
beta <- as.matrix(beta)
beta <- rownames(beta)
# Fitting into glm
glm.input <- as.formula(paste("rating", "~", paste(beta[-1],collapse = "+")))
result.glm <- glm(glm.input, data=data2.train, family=binomial)
# Error from glm fit
predict.glm <- predict(result.glm, data2.test[,-1], type = "response")
class.glm <- rep("0", 10000)
class.glm[predict.glm > .5] ="1"
mean(data2.test$rating != class.glm)
# Pulling out the betas
beta.lasso <- coef(result.lasso, s="lambda.1se")
beta <- beta.lasso[which(beta.lasso !=0),]
beta <- as.matrix(beta)
beta <- rownames(beta)
# Fitting into glm
glm.input <- as.formula(paste("rating", "~", paste(beta[-1],collapse = "+")))
result.glm <- glm(glm.input, data=data2.train, family=binomial)
# Error from glm fit
predict.glm <- predict(result.glm, data2.test[,-1], type = "response")
class.glm <- rep("0", 10000)
class.glm[predict.glm > .5] ="1"
mean(data2.test$rating != class.glm)
beta
# Error from LASSO fit
predict.lasso <- predict(result.lasso, as.matrix(data2.test[, -1]), type = "class", s="lambda.1se")
mean(data2.test$rating != predict.lasso)
# Error from glm fit
predict.glm <- predict(result.glm, data2.test[,-1], type = "response")
class.glm <- rep("0", 10000)
class.glm[predict.glm > .5] ="1"
mean(data2.test$rating != class.glm)
result.lasso
result.lasso$glmnet.fit
predict.val <- predict(result.lasso, as.matrix(data2.validation[, -1]), type = "class", s="lambda.1se")
mean(data2.test$rating != predict.lasso)
predict.val <- predict(result.lasso, as.matrix(data2.validation[, -1]), type = "class", s="lambda.1se")
mean(data2.validation$rating != predict.lasso)
mean(data2.validation$rating != predict.val)
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
library(keras)
install_keras()
install.packages(devtools)
install.packages("devtools")
devtools::install_github("rstudio/keras")
library(keras)
install_keras()
install_keras()
library(keras)
install_keras()
library(RSQLite)
filename <- "billboard-200.db"
sqlite.driver <- dbDriver("SQLite")
db <- dbConnect(sqlite.driver,
dbname = filename)
## Some operations
tables <- dbListTables(db)
acoustic.tb <- dbReadTable(db,"acoustic_features")
tables
acoustic.tb <- dbReadTable(db,"acoustic_features")
db <- dbConnect(sqlite.driver,
dbname = filename)
merge.new <- merge(bill100, acoustic.tb, by=c("artist", "song"))
bill100 <- read.csv(file = "Hot Stuff.csv")
bill100 <- read.csv(file = "Hot Stuff.csv")
library(RSQLite)
filename <- "billboard-200.db"
sqlite.driver <- dbDriver("SQLite")
db <- dbConnect(sqlite.driver,
dbname = filename)
## Some operations
tables <- dbListTables(db)
acoustic.tb <- dbReadTable(db, "acoustic_features")
albums.tb <- dbReadTable(db, "albums")
db <- dbConnect(sqlite.driver,
dbname = filename)
## Some operations
tables <- dbListTables(db)
acoustic.tb <- dbReadTable(db, "acoustic_features")
db <- dbConnect(sqlite.driver,
dbname = filename)
# Load library and initialize
library(RSQLite)
library(dplyr)
library(lubridate)
filename <- "billboard-200.db"
sqlite.driver <- dbDriver("SQLite")
db <- dbConnect(sqlite.driver,
dbname = filename)
## Some operations
tables <- dbListTables(db)
acoustic.tb <- dbReadTable(db, "acoustic_features")
setwd("/Users/ndduong/Desktop/stat471-song-proj")
filename <- "billboard-200.db"
sqlite.driver <- dbDriver("SQLite")
db <- dbConnect(sqlite.driver,
dbname = filename)
## Some operations
tables <- dbListTables(db)
acoustic.tb <- dbReadTable(db, "acoustic_features")
albums.tb <- dbReadTable(db, "albums")
# Reading data
bill100 <- read.csv(file = "Hot Stuff.csv")
colnames(bill100)[4] <- "song"
colnames(bill100)[5] <- "artist"
# Merging with World Data
merged.tb <- merge(bill100, acoustic.tb, by=c("artist", "song"))
merged.tb <- merged.tb[, -c(3, 5, 6, 7, 8, 11, 26, 27)]
merged.tb$WeekID <- as.Date(merged.tb$WeekID, "%m/%d/%Y")
names(merged.tb)
# Grouping
merged.tb2 <- merged.tb %>%
group_by(
song,
artist,
album,
acousticness,
danceability,
duration_ms,
energy,
instrumentalness,
key,
liveness,
loudness,
mode,
speechiness,
tempo,
time_signature,
valence) %>%
summarise(
WeekID = min(WeekID),
Peak.Position = max(Peak.Position),
Weeks.on.Chart = max(Weeks.on.Chart)
)
# Subset of songs after 2000
df2000 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=2000))
df2000 <- df2000[order(df2000$WeekID), ]
dim(df2000)
df2000_grouped <- df2000 %>%
group_by(song, artist, WeekID, Peak.Position, Weeks.on.Chart) %>%
summarise(
acousticness = round(mean(acousticness), 3),
danceability = round(mean(danceability), 3),
duration_ms = as.integer(mean(duration_ms)),
energy = round(mean(energy), 3),
instrumentalness = mean(instrumentalness),
key = as.integer(mean(key)),
liveness = round(mean(liveness), 3),
loudness = round(mean(loudness), 3),
mode = as.integer(mean(mode)),
speechiness = round(mean(speechiness), 4),
tempo = round(mean(tempo), 3),
time_signature = as.integer(mean(time_signature)),
valence = round(mean(valence), 3)
)
df2000_grouped = as.data.frame(df2000_grouped)
# Add factors
# Create season factor
# Winter = 12, 1, 2; Spring = 3, 4, 5, Summer = 6,7,8 Fall = 9, 10, 11
df2000.seasons <- df2000_grouped %>%
mutate(Month=as.numeric(format(WeekID, "%m"))) %>%
mutate(Season=
case_when(
Month == 12 | Month <= 2 ~ "Winter",
Month >= 3 & Month <= 5 ~ "Spring",
Month >= 6 & Month <= 8 ~ "Summer",
Month >= 9 & Month <= 11 ~ "Fall",
TRUE ~ "NA"
)
)
# Create artist popularity factor
# artist.pop = number of hot 100 songs by artist in past 3 years
df1997 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=1997))
df1997 <- df1997[order(df1997$WeekID), ] # get songs since 1997
artist.pop.list <- c()
for (idx in 1:nrow(df2000_grouped)) {
WeekID <- df2000_grouped[idx, "WeekID"]
artist <- df2000_grouped[idx, "artist"]
three.y.earlier <- WeekID %m-% months(12*3)
artist.pop <- nrow(df1997[(df1997$artist == artist) & (df1997$WeekID < WeekID) & (df1997$WeekID >= three.y.earlier),])
artist.pop.list <- c(artist.pop.list, artist.pop)
}
df2000.seasons$artist.pop <- artist.pop.list
write.csv(df2000.seasons, 'df2000_grouped_morefactors.csv')
df2000.seasons
dim(df2000.seasons[df2000.seasons$Peak.Position <= 90,])
dim(df2000.seasons[df2000.seasons$Peak.Position > 90,])
histogram(df2000.seasons$Peak.Position)
histogram(df2000.seasons$Peak.Position)
hist(df2000.seasons$Peak.Position)
hist(log(df2000.seasons$Peak.Position))
hist(df2000.seasons$Peak.Position)
dim(df2000.seasons[df2000.seasons$Peak.Position <= 20,])
dim(df2000.seasons[df2000.seasons$Peak.Position <= 40,])
# Subset of songs after 2000
df2000 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=1980))
df2000 <- df2000[order(df2000$WeekID), ]
dim(df2000)
# Subset of songs after 2000
df2000 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=1970))
df2000 <- df2000[order(df2000$WeekID), ]
dim(df2000)
df2000_grouped <- df2000 %>%
group_by(song, artist, WeekID, Peak.Position, Weeks.on.Chart) %>%
summarise(
acousticness = round(mean(acousticness), 3),
danceability = round(mean(danceability), 3),
duration_ms = as.integer(mean(duration_ms)),
energy = round(mean(energy), 3),
instrumentalness = mean(instrumentalness),
key = as.integer(mean(key)),
liveness = round(mean(liveness), 3),
loudness = round(mean(loudness), 3),
mode = as.integer(mean(mode)),
speechiness = round(mean(speechiness), 4),
tempo = round(mean(tempo), 3),
time_signature = as.integer(mean(time_signature)),
valence = round(mean(valence), 3)
)
df2000_grouped = as.data.frame(df2000_grouped)
# Add factors
# Create season factor
# Winter = 12, 1, 2; Spring = 3, 4, 5, Summer = 6,7,8 Fall = 9, 10, 11
df2000.seasons <- df2000_grouped %>%
mutate(Month=as.numeric(format(WeekID, "%m"))) %>%
mutate(Season=
case_when(
Month == 12 | Month <= 2 ~ "Winter",
Month >= 3 & Month <= 5 ~ "Spring",
Month >= 6 & Month <= 8 ~ "Summer",
Month >= 9 & Month <= 11 ~ "Fall",
TRUE ~ "NA"
)
)
# Create artist popularity factor
# artist.pop = number of hot 100 songs by artist in past 3 years
df1997 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=1997))
df1997 <- df1997[order(df1997$WeekID), ] # get songs since 1997
artist.pop.list <- c()
for (idx in 1:nrow(df2000_grouped)) {
WeekID <- df2000_grouped[idx, "WeekID"]
artist <- df2000_grouped[idx, "artist"]
three.y.earlier <- WeekID %m-% months(12*3)
artist.pop <- nrow(df1997[(df1997$artist == artist) & (df1997$WeekID < WeekID) & (df1997$WeekID >= three.y.earlier),])
artist.pop.list <- c(artist.pop.list, artist.pop)
}
df2000.seasons$artist.pop <- artist.pop.list
df2000.seasons
dim(df2000.seasons[df2000.seasons$Peak.Position <= 40,])
dim(df2000.seasons[df2000.seasons$Peak.Position <= 10,])
# Subset of songs after 2000
df2000 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=2000))
df2000 <- df2000[order(df2000$WeekID), ]
dim(df2000)
df2000_grouped <- df2000 %>%
group_by(song, artist, WeekID, Peak.Position, Weeks.on.Chart) %>%
summarise(
acousticness = round(mean(acousticness), 3),
danceability = round(mean(danceability), 3),
duration_ms = as.integer(mean(duration_ms)),
energy = round(mean(energy), 3),
instrumentalness = mean(instrumentalness),
key = as.integer(mean(key)),
liveness = round(mean(liveness), 3),
loudness = round(mean(loudness), 3),
mode = as.integer(mean(mode)),
speechiness = round(mean(speechiness), 4),
tempo = round(mean(tempo), 3),
time_signature = as.integer(mean(time_signature)),
valence = round(mean(valence), 3)
)
df2000_grouped = as.data.frame(df2000_grouped)
# Add factors
# Create season factor
# Winter = 12, 1, 2; Spring = 3, 4, 5, Summer = 6,7,8 Fall = 9, 10, 11
df2000.seasons <- df2000_grouped %>%
mutate(Month=as.numeric(format(WeekID, "%m"))) %>%
mutate(Season=
case_when(
Month == 12 | Month <= 2 ~ "Winter",
Month >= 3 & Month <= 5 ~ "Spring",
Month >= 6 & Month <= 8 ~ "Summer",
Month >= 9 & Month <= 11 ~ "Fall",
TRUE ~ "NA"
)
)
# Create artist popularity factor
# artist.pop = number of hot 100 songs by artist in past 3 years
df1997 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=1997))
df1997 <- df1997[order(df1997$WeekID), ] # get songs since 1997
artist.pop.list <- c()
for (idx in 1:nrow(df2000_grouped)) {
WeekID <- df2000_grouped[idx, "WeekID"]
artist <- df2000_grouped[idx, "artist"]
three.y.earlier <- WeekID %m-% months(12*3)
artist.pop <- nrow(df1997[(df1997$artist == artist) & (df1997$WeekID < WeekID) & (df1997$WeekID >= three.y.earlier),])
artist.pop.list <- c(artist.pop.list, artist.pop)
}
df2000.seasons$artist.pop <- artist.pop.list
write.csv(df2000.seasons, 'df2000_grouped_morefactors.csv')
df2000_grouped <- read.csv('df2000_grouped_morefactors.csv')
df2000.seasons <- read.csv('df2000_grouped_morefactors.csv')
dim(df2000.seasons[df2000.seasons$Peak.Position <= 40,])
df2000.seasons[df2000.seasons$Peak.Position <= 40,]
df2000.seasons[df2000.seasons$Weeks.on.Chart <= 20]
df2000.seasons[df2000.seasons$Weeks.on.Chart <= 20,]
df2000.seasons[df2000.seasons$Weeks.on.Chart <= 10,]
unique(acoustic.tb)
unique(acoustic.tb$song)
unique(merged.tb2)
unique(bill100$song)
df2000.seasons[df2000.seasons$Peak.Position <= 40,]
# Merging with World Data
merged.tb <- merge(bill100, acoustic.tb, by=c("artist", "song"))
merged.tb <- merged.tb[, -c(3, 5, 6, 7, 8, 11, 26, 27)]
merged.tb$WeekID <- as.Date(merged.tb$WeekID, "%m/%d/%Y")
names(merged.tb)
# Grouping
merged.tb2 <- merged.tb %>%
group_by(
song,
artist,
album,
acousticness,
danceability,
duration_ms,
energy,
instrumentalness,
key,
liveness,
loudness,
mode,
speechiness,
tempo,
time_signature,
valence) %>%
summarise(
WeekID = min(WeekID),
Peak.Position = max(Peak.Position),
Weeks.on.Chart = max(Weeks.on.Chart)
)
# Subset of songs after 2000
df2000 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=2000))
df2000 <- df2000[order(df2000$WeekID), ]
dim(df2000)
df2000_grouped <- df2000 %>%
group_by(song, artist, WeekID, Peak.Position, Weeks.on.Chart) %>%
summarise(
acousticness = round(mean(acousticness), 3),
danceability = round(mean(danceability), 3),
duration_ms = as.integer(mean(duration_ms)),
energy = round(mean(energy), 3),
instrumentalness = mean(instrumentalness),
key = as.integer(mean(key)),
liveness = round(mean(liveness), 3),
loudness = round(mean(loudness), 3),
mode = as.integer(mean(mode)),
speechiness = round(mean(speechiness), 4),
tempo = round(mean(tempo), 3),
time_signature = as.integer(mean(time_signature)),
valence = round(mean(valence), 3)
)
df2000_grouped = as.data.frame(df2000_grouped)
# Add factors
# Create season factor
# Winter = 12, 1, 2; Spring = 3, 4, 5, Summer = 6,7,8 Fall = 9, 10, 11
df2000.seasons <- df2000_grouped %>%
mutate(Month=as.numeric(format(WeekID, "%m"))) %>%
mutate(Season=
case_when(
Month == 12 | Month <= 2 ~ "Winter",
Month >= 3 & Month <= 5 ~ "Spring",
Month >= 6 & Month <= 8 ~ "Summer",
Month >= 9 & Month <= 11 ~ "Fall",
TRUE ~ "NA"
)
)
# Create artist popularity factor
# artist.pop = number of hot 100 songs by artist in past 3 years
df1997 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")>=1997))
df1997 <- df1997[order(df1997$WeekID), ] # get songs since 1997
artist.pop.list <- c()
for (idx in 1:nrow(df2000_grouped)) {
WeekID <- df2000_grouped[idx, "WeekID"]
artist <- df2000_grouped[idx, "artist"]
three.y.earlier <- WeekID %m-% months(12*3)
artist.pop <- nrow(df1997[(df1997$artist == artist) & (df1997$WeekID < WeekID) & (df1997$WeekID >= three.y.earlier),])
artist.pop.list <- c(artist.pop.list, artist.pop)
}
df2000.seasons$artist.pop <- artist.pop.list
write.csv(df2000.seasons, 'df2000_grouped_morefactors.csv')
sample
sample()
help(sample)
df2000.seasons$top40 <- ifelse(df2000.seasons$Peak.Position <= 40, 1, 0)
df2000.seasons
help(Boot)
help(boot)
library(boot)
help(boot)
boot.index <- sample(1000, 1000, replace=TRUE)
boot.index
boot.index <- sample(1000, 1, replace=TRUE)
boot.index
boot.index <- sample(nrow(df2000.seasons), nrow(df2000.seasons), replace=TRUE)
boot.index <- sample(nrow(df2000.seasons), 1000, replace=TRUE)
df2000.seasons.test <- df2000.seasons[boot.index,]
dim(df2000.seasons.test)
df2000.seasons.test
df2000.seasons[df2000.seasons$top40==1,]
names(df2000)
names(df2000.seasons)
Y <- df2000.seasons$top40
X <- as.matrix(df2000.seasons[, -c(22)])
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
library(glmnet)
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
sum(is.na(df2000.seasons))
sum(is.na(df2000.seasons$Weeks.on.Chart))
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
plot(result.lasso)
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
Y
sum(is.na(df2000.seasons$top40))
df2000.seasons$top40
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
knitr::opts_chunk$set(fig.height=4, fig.width=6, warning = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(randomForest, tree, ISLR, rpart, rattle, pROC, partykit, ggplot2, glmnet, leaps, dplyr)
# constants for homework assignments
hw_num <- 4
hw_due_date <- "21, April, 2019"
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
is.na(Y)
sum(is.NA(Y))
sum(is.na(Y))
X
names((df2000.seasons))
X <- as.matrix(df2000.seasons[, -c(1, 2, 3, 4, 5, 19)])
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
names(X)
X
X <- as.matrix(df2000.seasons[, -c(1, 2, 3, 4, 5, 19, 20)])
X
names(df2000.seasons)
X <- as.matrix(df2000.seasons[, -c(1, 2, 3, 4, 5, 19, 22)])
X
df2000.seasons$Season <- as.factor(df2000.seasons$Season)
names(df2000.seasons)
Y <- df2000.seasons$top40
X <- as.matrix(df2000.seasons[, -c(1, 2, 3, 4, 5, 19, 22)])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
df2000.seasons
Y <- df2000.seasons$top40
X <- as.matrix(df2000.seasons[, -c(1, 2, 3, 4, 5, 19, 22)])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
X <- as.matrix(df2000.seasons[, 6])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
X <- as.matrix(df2000.seasons[, c(6,7)])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
plot(result.lasso)
names(df2000.seasons)
X <- as.matrix(df2000.seasons[, c(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21)])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
plot(result.lasso)
Y <- df2000.seasons$top40
X <- as.matrix(df2000.seasons[, c(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21)])
X
X <- as.matrix(df2000.seasons[, c(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
plot(result.lasso)
X <- as.matrix(df2000.seasons[, c(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
plot(result.lasso)
lasso.lambda.1se <- result.lasso$lambda.1se
lasso.lambda.1se
X <- as.matrix(df2000.seasons[, c(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21)])
X
result.lasso <- cv.glmnet(X, Y, alpha=1, family="binomial")
plot(result.lasso)
lasso.lambda.1se <- result.lasso$lambda.1se
lasso.lambda.1se
df2000.seasons
names(df2000.seasons)
result.lasso$cvm
# Subset of songs after 2000
df2000 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")))
df2000 <- df2000[order(df2000$WeekID), ]
# Subset of songs after 2000
df2000 <- as.data.frame(subset(merged.tb2, format(WeekID,"%Y")))
merged.tb2[merged.tb2$Peak.Position<=10,]
merged.tb2[merged.tb2$Peak.Position<=40,]
